;;; -*- mode: emacs-lisp;lexical-binding: t -*-

;; use act for dvorak
(setq skk-use-act t)

;; 動的候補表示
(setq skk-dcomp-activate t)

;; 英単語補完
(setq skk-use-look t)
(setq skk-look-recursive-search t)

;; 変換時に注釈 (annotation) を表示する
(setq skk-show-annotation t)

;; 変換候補一覧と注釈 (annotation) を GUI ぽく表示する
(setq skk-show-tooltip t)

;; Enter キーを押したときには確定する
(setq skk-egg-like-newline t)

;; 動的補完で候補を複数表示する
(setq skk-dcomp-multiple-activate t)

;; icon
(setq skk-show-icon t)

;; face
(defface muki:skk-tooltip
    '((t (:foreground "#93b8bb"
          :background "#232323"
          :bok nil)))
  "face for skk tooltip")
(setq skk-tooltip-face 'muki:skk-tooltip)

;; か行をcで入れるときに辞書の送りがなをちゃんとする。
;; (setq skk-okuri-char-alist '((\"c\" . \"k\")))

(defun muki:add-skk-jisyo (dicts)
  (cl-letf ((dict-directory (expand-file-name "ddskk/dic"
                                              user-emacs-directory)))
    (cl-mapc
     (lambda (d)
       (cl-letf ((elem (if (listp d)
                           (cons (expand-file-name (car d) dict-directory)
                                 (cdr d))
                         (expand-file-name d dict-directory))))
         (when (file-exists-p (if (listp elem) (car elem) elem))
           (add-to-list 'skk-search-prog-list
                        `(skk-search-jisyo-file
                          ,elem
                          10000)
                        t))))
     dicts)))

(muki:add-skk-jisyo
 '("SKK-JISYO.jinmei"
   "SKK-JISYO.itaiji"
   "SKK-JISYO.itaiji.JIS3_4"
   ;; "SKK-JISYO.emoji.utf8"
   ))

;; (muki:add-skk-jisyo
;;  '(("SKK-JISYO.jinmei" . euc-jp)
;;    ("SKK-JISYO.itaiji" . euc-jp)
;;    ("SKK-JISYO.itaiji.JIS3_4" . euc-jp)
;;    ("SKK-JISYO.emoji.utf8" . utf-8)))
