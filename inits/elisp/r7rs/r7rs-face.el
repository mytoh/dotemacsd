;; faces

(defmacro* r7rs:make-face (face fore)
  `(progn
     (make-face ,face)
     (set-face-foreground ,face  ,fore)))


(defun r7rs:add-faces ()
  (dolist (p '((r7rs:syntax-face "#F92672")
               (r7rs:function-face "#66D9EF")
               (r7rs:string-face "#f24f47")
               (r7rs:character-face "#fee1a2")
               (r7rs:number-face "#b5ae5b")
               (r7rs:boolean-face "#ffbe5c")
               (r7rs:delimiter-face "#ababab")
               (r7rs:constant-face "#e9c3b9")
               (r7rs:comment-face "#ababab")
               (r7rs:multicomment-face "#ababab")
               (r7rs:error-face "#ababab")
               (r7rs:library-name-face "#b34aae")
               (r7rs:module-macro-face "#9399ab")
               (r7rs:module-syntax-face "#93c9ab")
               (r7rs:module-function-face "#3b5993")
               (r7rs:module-procedure-face "#3b9993")
               (r7rs:module-method-face "#c3b9a9")
               (r7rs:module-charset-face "#9bc993")
               (r7rs:module-class-face "#ebc893")
               (r7rs:module-parameter-face "#e999b3")
               (r7rs:module-name-face "#6a93cc")
               (r7rs:regexp-face "#7ea978")
               (r7rs:srfi62-comment-face "#ababab")
               (r7rs:sharpbang-face "#ababab")
               (r7rs:include-face "#ababab")
               (r7rs:interpolation-face "#ababab")
               ))
    (message "making face %s" p)
    (r7rs:make-face (car p) (cadr p))))


(provide 'r7rs-face)
