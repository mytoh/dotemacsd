#!emacs --script
;; -*- lexical-binding: t; -*-

(setq lexical-binding t)
(setq debug-on-error t)

(require 'cl-lib)
(require 'cl-generic)

(add-to-list 'load-path (expand-file-name "~/huone/projektit/emacs-hoarder"))
(require 'hoarder)

(cl-defmethod hoarder:update-package-git-async ((package hoarder:<package>))
              (cl-letf ((name (hoarder:package-name package))
                        (path (hoarder:concat-path hoarder-directory (hoarder:package-origin package)))
                        (type (hoarder:package-type package)))
                       (when (and (cl-equalp 'git type)
                                  (not (file-symlink-p path)))
                         (cl-letf* ((proc-buf (get-buffer-create (format "hoarder-git-%s" (hoarder:package-origin package))))
                                    (proc-name (format "hoarder-git-pull-%s" (hoarder:package-origin package)))
                                    (proc (start-process-shell-command proc-name
                                                                       proc-buf
                                                                       (format "git -C %s pull" path)))
                                    (sentinel-cb
                                     (lambda (process signal)
                                       (cond
                                         ((equal signal "finished\n")
                                          (cl-letf ((result (with-current-buffer (process-buffer process)
                                                              (buffer-substring (point-min) (point-max)))))
                                                   (hoarder:message "updated package %s" name)
                                                   (cond
                                                     ((hoarder:git-updatedp result)
                                                      (hoarder:message "compiling package %s" name)
                                                      (hoarder:message "result: %s" result)
                                                      (hoarder:option-compile package path)
                                                      (hoarder:option-build package)))
                                                   (kill-buffer (process-buffer process))))
                                         (t
                                          (message "got signal %s" signal)
                                          (display-buffer (process-buffer process)))))))
                                   (set-process-sentinel proc sentinel-cb)
                                   proc))))


(cl-defmethod hoarder:update-package-git-async-make-process ((package hoarder:<package>))
              (cl-letf ((name (hoarder:package-name package))
                        (path (hoarder:concat-path hoarder-directory (hoarder:package-origin package)))
                        (type (hoarder:package-type package)))
                       (when (and (cl-equalp 'git type)
                                  (not (file-symlink-p path)))
                         (cl-letf* ((proc-buf (get-buffer-create (format "hoarder-git-%s" (hoarder:package-origin package))))
                                    (proc-name (format "hoarder-git-pull-%s" (hoarder:package-origin package))))
                                   (cl-labels ((sentinel-cb (process signal)
                                                            (message signal)
                                                            (cond
                                                              ((equal signal "finished\n")
                                                               (cl-letf ((result (with-current-buffer (process-buffer process)
                                                                                   (buffer-substring (point-min) (point-max)))))
                                                                        (hoarder:message "updated package %s" name)
                                                                        (cond
                                                                          ((hoarder:git-updatedp result)
                                                                           (hoarder:message "compiling package %s" name)
                                                                           ;; (hoarder:message "result: %s" result)
                                                                           (when (hoarder:package-compile package)
                                                                             (hoarder:option-compile package path))
                                                                           (hoarder:option-build package)))
                                                                        (kill-buffer (process-buffer process))))
                                                              (t
                                                               (message "got signal %s" signal)
                                                               (display-buffer (process-buffer process))))))
                                              (make-process
                                               :name proc-name
                                               :buffer proc-buf
                                               :command (list "git" "-C" path "pull" )
                                               :sentinel #'sentinel-cb))))))

(cl-defun hoarder-update-async ()
          (interactive)
          (cl-letf ((pkgs (seq-partition
                           hoarder:*packages*
                           2)))
                   (seq-each
                    (lambda (ps)
                      (seq-each
                       #'accept-process-output
                       (seq-map
                        #'hoarder:update-package-git-async
                        ps)))
                    pkgs)))

(cl-defun hoarder-async-update-make-process ()
          (interactive)
          (cl-letf ((pkgs
                     ;; (seq-partition *hoarder-package-list* 2)
                     (seq-partition
                      ;; (seq-take hoarder:*packages* 10)
                      hoarder:*packages*
                      4)))
                   (seq-each
                    (lambda (pkg)
                      (thread-last pkg
                                   (seq-map #'hoarder:update-package-git-async-make-process)
                                   (seq-each #'accept-process-output)))
                    pkgs))
          (message "update finished"))

(defun main ()
  (cl-letf ((muki:hoarder-directory
             (expand-file-name (file-name-as-directory "hoarder")
                               user-emacs-directory)))
           (hoarder:initialize muki:hoarder-directory))

  (load "~/.emacs.d/init.d/layer/package/register/init.el")

  (pcase (car argv)
         ("update"
          (hoarder-update))
         ("update-async"
          (hoarder-async-update-make-process))
         ("check"
          (hoarder:check))))

(main)

;; Local Variables:
;; mode: emacs-lisp
;; End:
