#!emacs --script
;; -*- mode: emacs-lisp; lexical-binding: t; -*-

(setq lexical-binding t)

(add-to-list 'load-path  "~/huone/projektit/emacs-vendle")
(require 'vendle)

(cl-defmethod vendle:update-package-git-async ((package vendle:<package>))
  (cl-letf ((name (vendle:package-name package))
            (path (vendle:concat-path vendle-directory (vendle:package-origin package)))
            (type (vendle:package-type package)))
    (when (and (cl-equalp 'git type)
               (not (file-symlink-p path)))
      (cl-letf* ((proc-buf (get-buffer-create (format "vendle-git-%s" (vendle:package-origin package))))
                 (proc-name (format "vendle-git-pull-%s" (vendle:package-origin package)))
                 (proc (start-process-shell-command proc-name
                                                    proc-buf
                                                    (format "git -C %s pull" path)))
                 (sentinel-cb
                  (lambda (process signal)
                    (cond
                      ((equal signal "finished\n")
                       (cl-letf ((result (with-current-buffer (process-buffer process)
                                           (buffer-substring (point-min) (point-max)))))
                         (vendle:message "updated package %s" name)
                         (cond
                           ((vendle:git-updatedp result)
                            (vendle:message "compiling package %s" name)
                            (vendle:message "result: %s" result)
                            (vendle:option-compile package path)
                            (vendle:option-build package)))
                         (kill-buffer (process-buffer process))))
                      (t
                       (message "got signal %s" signal)
                       (display-buffer (process-buffer process)))))))
        (set-process-sentinel proc sentinel-cb)
        proc))))


(cl-defmethod vendle:update-package-git-async-make-process ((package vendle:<package>))
  (cl-letf ((name (vendle:package-name package))
            (path (vendle:concat-path vendle-directory (vendle:package-origin package)))
            (type (vendle:package-type package)))
    (when (and (cl-equalp 'git type)
               (not (file-symlink-p path)))
      (cl-letf* ((proc-buf (get-buffer-create (format "vendle-git-%s" (vendle:package-origin package))))
                 (proc-name (format "vendle-git-pull-%s" (vendle:package-origin package))))
        (cl-labels ((sentinel-cb (process signal)
                      (message signal)
                      (cond
                        ((equal signal "finished\n")
                         (cl-letf ((result (with-current-buffer (process-buffer process)
                                             (buffer-substring (point-min) (point-max)))))
                           (vendle:message "updated package %s" name)
                           (cond
                             ((vendle:git-updatedp result)
                              (vendle:message "compiling package %s" name)
                              ;; (vendle:message "result: %s" result)
                              (when (vendle:package-compile package)
                                (vendle:option-compile package path))
                              (vendle:option-build package)))
                           (kill-buffer (process-buffer process))))
                        (t
                         (message "got signal %s" signal)
                         (display-buffer (process-buffer process))))))
          (make-process
           :name proc-name
           :buffer proc-buf
           :command (list "git" "-C" path "pull" )
           :sentinel #'sentinel-cb))))))

(cl-defun vendle-update-async ()
  (interactive)
  (cl-letf ((pkgs (seq-partition
                   vendle:*packages*
                   2)))
    (seq-each
     (lambda (ps)
       (seq-each
        #'accept-process-output
        (seq-map
         #'vendle:update-package-git-async
         ps)))
     pkgs)))

(cl-defun vendle-async-update-make-process ()
  (interactive)
  (cl-letf ((pkgs
             ;; (seq-partition *vendle-package-list* 2)
             (seq-partition
              ;; (seq-take vendle:*packages* 10)
              vendle:*packages*
              2)))
    (seq-each
     (lambda (pkg)
       (thread-last pkg
         (seq-map #'vendle:update-package-git-async-make-process)
         (seq-each #'accept-process-output)))
     pkgs))
  (message "update finished"))

(defun main ()
  (cl-letf ((muki:vendle-directory
             (expand-file-name (file-name-as-directory "vendle")
                               user-emacs-directory)))
    (vendle:initialize muki:vendle-directory))

  (load "~/.emacs.d/init.d/layer/package/register/init.el")

  (pcase (car argv)
    ("update"
     (vendle-update))
    ("update-async"
     (vendle-async-update-make-process))
    ("check"
     (vendle:check))))

(main)
